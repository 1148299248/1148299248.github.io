<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>java基础知识</title>
    <url>/2020/02/23/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<a id="more"></a>
<h3 id="Java基础知识"><a href="#Java基础知识" class="headerlink" title="Java基础知识"></a>Java基础知识</h3><h5 id="1-Constructor可以重写吗？"><a href="#1-Constructor可以重写吗？" class="headerlink" title="1.Constructor可以重写吗？"></a>1.<code>Constructor</code>可以重写吗？</h5><p><code>Constructor</code>不允许重写<code>@Override</code>，但是可以重载<code>（overload）</code>。</p>
<hr>
<h5 id="2-重写（-Override）-amp-重载（overload）"><a href="#2-重写（-Override）-amp-重载（overload）" class="headerlink" title="2.重写（@Override） &amp; 重载（overload）"></a>2.重写<code>（@Override）</code> &amp; 重载<code>（overload）</code></h5><ul>
<li>重写<code>@Override</code>：发生在<strong>父子类</strong>中，函数名、参数列表必须相同，子类返回值范围必须小于等于父类返回值，子类抛出异常范围必须小于等于父类，子类访问修饰符必须大于等于父类<blockquote>
<p><strong>父类的<code>private</code>、<code>final</code>、<code>Construnctor</code>函数不允许被重写</strong></p>
</blockquote>
</li>
<li>重载（overload）：发生在<strong>同一类</strong>中，函数名必须相同，参数列表、返回值、修饰符可以不同。</li>
</ul>
<hr>
<h5 id="3-String-amp-StringBuilder-amp-StringBuffer"><a href="#3-String-amp-StringBuilder-amp-StringBuffer" class="headerlink" title="3.String &amp; StringBuilder &amp; StringBuffer"></a>3.<code>String</code> &amp; <code>StringBuilder</code> &amp; <code>StringBuffer</code></h5><p>&nbsp;&nbsp;&nbsp;1.可变性：<code>String</code>是不可变的，<code>StringBuilder</code>和<code>StringBuffer</code>都是可变的</p>
<blockquote>
<p><strong><code>String</code>内部采用<code>final</code>类型的数组存储字符串，所以是不可变的。</strong><br><code>StringBuilder</code>和<code>StringBuffer</code>内部用于存储字符串的数组都不是<code>final</code>的。</p>
</blockquote>
<p>&nbsp;&nbsp;&nbsp;2.线程安全性：<code>String</code>由于是不可变的，所以天生线程安全；<code>StringBuilder</code>不是线程安全的；<code>StringBuffer</code>通过同步锁保证了线程安全<br>&nbsp;&nbsp;&nbsp;3. 性能：<code>StringBuilder</code>比<code>StringBuffer</code>性能要优10%~15%，但是线程不安全；<code>String</code><strong>每次修改是指向新的对象，而<code>StringBuilder</code>则是每次操作原有对象</strong></p>
<h5 id="使用总结"><a href="#使用总结" class="headerlink" title="使用总结"></a>使用总结</h5><p>&nbsp;&nbsp;&nbsp;1.操作少量字符串：<code>String</code><br>&nbsp;&nbsp;&nbsp;2.<strong>单线程</strong>操作大量字符串：<code>StringBuilder</code><br>&nbsp;&nbsp;&nbsp;3.<strong>多线程</strong>操作大量字符串：<code>StringBuffer</code></p>
<hr>
<h5 id="4-接口（public-interface）-amp-抽象类（abstract-class）"><a href="#4-接口（public-interface）-amp-抽象类（abstract-class）" class="headerlink" title="4.接口（public interface） &amp; 抽象类（abstract class）"></a>4.接口<code>（public interface）</code> &amp; 抽象类<code>（abstract class）</code></h5><p>&nbsp;&nbsp;&nbsp;1.接口必须是<code>public</code>的，抽象类除了<code>private</code>都可以<br>&nbsp;&nbsp;&nbsp;2.接口变量必须是<code>final</code>、<code>static</code>的，抽象类则不一定</p>
<blockquote>
<p>接口变量必须是<code>static</code>的，但是接口本身不能是<code>static</code>的</p>
</blockquote>
<p>&nbsp;&nbsp;&nbsp;3.性能：<code>StringBuilder</code>比<code>StringBuffer</code>性能要优10%~15%，但是线程不安全；<code>String</code><strong>每次修改是指向新的对象，而<code>StringBuilder</code>则是每次操作原有对象</strong></p>
<hr>
<h5 id="5-使用常量或有确定值的对象调用equals"><a href="#5-使用常量或有确定值的对象调用equals" class="headerlink" title="5.使用常量或有确定值的对象调用equals()"></a>5.使用常量或有确定值的对象调用equals()</h5><p><strong>如果通过<code>null</code>调用<code>equals()</code>会导致<code>NullPointerException</code>，所以如果要调用<code>equals()</code>，那么最好是常量，或者对象一定非<code>null</code>。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String s &#x3D; null;</span><br><span class="line">if(s.equals(&quot;xxxx&quot;) ) &#123;...&#125; &#x2F;&#x2F;NullPointerException</span><br><span class="line">if(&quot;xxxx&quot;.equals(s) ) &#123;...&#125; &#x2F;&#x2F;通过常量调用</span><br></pre></td></tr></table></figure>
<p><strong>推荐直接使用工具类<code>java.util.Objects</code>的<code>equals()</code>方法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(Objects.equals(s, &quot;xxxx&quot;) )&#123;</span><br><span class="line">    &#x2F;&#x2F;...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="6-a-和-a的区别"><a href="#6-a-和-a的区别" class="headerlink" title="6.a++和++a的区别"></a>6.a++和++a的区别</h5><ul>
<li>a++是先使用a，使用完后再a = a + 1</li>
<li>++a是先让a + 1，再使用a的值<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int a &#x3D; 10 &gt;&gt; 1;    &#x2F;&#x2F;a &#x3D; 5</span><br><span class="line">int b &#x3D; a++;        &#x2F;&#x2F;先使用a的原值，所以b &#x3D; 5，然后a + 1， a &#x3D; 6</span><br><span class="line">int c &#x3D; ++a;        &#x2F;&#x2F;先让a + 1，a &#x3D; 7，c &#x3D; 7</span><br><span class="line">int d &#x3D; b * a++;    &#x2F;&#x2F;先使用a的旧值，d &#x3D; 5 * 7 &#x3D; 35，然后a + 1，a&#x3D; 8</span><br><span class="line">System.out.println(a);  &#x2F;&#x2F;8</span><br><span class="line">System.out.println(b);  &#x2F;&#x2F;5</span><br><span class="line">System.out.println(c);  &#x2F;&#x2F;7</span><br><span class="line">System.out.println(d);  &#x2F;&#x2F;35</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x2F;&#x2F;i，j均为数组下标</span><br><span class="line"></span><br><span class="line">map.add(string.charAt(j++));</span><br><span class="line">&#x2F;&#x2F;等价于：</span><br><span class="line">&#x2F;&#x2F;map.add(string.charAt(j));</span><br><span class="line">&#x2F;&#x2F;j &#x3D; j + 1;</span><br></pre></td></tr></table></figure>






</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>springcloud</title>
    <url>/2020/02/23/springcloud/</url>
    <content><![CDATA[<h3 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h3><p><code>Spring Cloud</code>可以将大的项目拆分成若干个小的模块，每一个模块都是一个独立的子系统，所有子模块组合起来完成系统总功能。</p>
<a id="more"></a>
<p>基础功能：<br>    1.服务治理:<code>Spring Cloud Eureka</code><br>    2.客户端负载均衡：<code>Spring Cloud Ribbon</code><br>    3.服务器容错保护：<code>Spring Cloud Hystrix</code><br>    4.声明式服务调用：<code>Spring Cloud Feign</code><br>    5.API网关服务：<code>Spring Cloud Zuul</code><br>    6.分布式配置中心：<code>Spring Cloud Config</code><br>高级功能：<br>    1.消息总线：<code>Spring Cloud Bus</code><br>    2.消息驱动的微服务：<code>Spring Cloud Stream</code><br>    3.分布式服务跟踪：<code>Spring Cloud Sleuth</code></p>
<hr>
<h3 id="Spring-Cloud技术栈"><a href="#Spring-Cloud技术栈" class="headerlink" title="Spring Cloud技术栈"></a>Spring Cloud技术栈</h3><p>消息中心：<code>Stream</code>、<code>Bus</code><br>配置中心：<code>Git</code>、<code>ZooKeeper</code><br>授权认证中心:<code>Security</code>、<code>JWT</code>、<code>Oauto</code><br>缓存中心：<code>Data</code><br>文档中心：<code>Swagger</code><br>服务注册与发现：<code>Eureka</code>、<code>Consul</code>、<code>Zookeeper</code><br>网关路由:<code>Zuul</code>、<code>Gateway</code><br>服务调用:<code>Ribbon</code>、<code>Feign</code>、<code>Hystrix</code><br>监控:<code>Actuctor</code>、<code>Admin</code><br>链路追踪:<code>Sleuth</code>、<code>Zipkin</code></p>
<blockquote>
<p>Spring Cloud 与 Dubbo 的区别：<br><strong>服务注册：Dubbo使用的ZooKeeper，注重数据一致性，抛弃高可用性；Spring Cloud使用的Eureka，注重高可用性，存在自我保护机制，允许旧数据；<br>服务调用：Dubbo使用RPC；Spring Cloud使用REST API；</strong><br>服务监控：Dubbo使用Dubbo-monitor，<strong>由Provider和Consumer统计服务调用成功次数、失败次数、平均响应时间，然后实时提交到监控中心；</strong>Spring Cloud使用Spring Boot Admin；<br>断路器：Dubbo无；Spring Cloud Hystrix；<br>服务网关：Dubbo无；Spring Cloud Zuul；<br>分布式配置：Dubbo无；Spring Cloud Config；<br>服务跟踪：Dubbo无；Spring Cloud Sleuth；<br>消息总线：Dubbo无；Spring Cloud Bus；<br>数据流：Dubbo无；Spring Cloud Stream；<br>批量任务：Dubbo无；Spring Cloud Task</p>
</blockquote>
<hr>
<h3 id="IDEA中Spring-Cloud项目的创建"><a href="#IDEA中Spring-Cloud项目的创建" class="headerlink" title="IDEA中Spring Cloud项目的创建"></a>IDEA中Spring Cloud项目的创建</h3><p>未完待续………………….</p>
]]></content>
      <categories>
        <category>spring系列</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>vim使用教程</title>
    <url>/2020/02/23/vim%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="vim使用教程"><a href="#vim使用教程" class="headerlink" title="vim使用教程"></a>vim使用教程</h2><p>本文先概述什么是vim以及为什么要学习vim，然后介绍vim的基础操作（包括normal模式、编辑模式、命令模式、可视化模式这4个模式，以及3个模式下的一些基础命令），最后介绍如何通过插件使你的vim赏心悦目。</p>
<a id="more"></a>
<hr>
<h3 id="vim简介"><a href="#vim简介" class="headerlink" title="vim简介"></a>vim简介</h3><h5 id="1-什么是vim？"><a href="#1-什么是vim？" class="headerlink" title="1.什么是vim？"></a>1.什么是vim？</h5><p>vim是Linux/Unix下的文本编辑器，类似于记事本，是vi的改进版本，纯键盘友好。</p>
<h5 id="2-为什么要学习vim？"><a href="#2-为什么要学习vim？" class="headerlink" title="2.为什么要学习vim？"></a>2.为什么要学习vim？</h5><p>后端免不了和服务器打交道，而服务器往往需要24 x 7 x 365，所以稳定的Linux服务器成了首选。在Linux服务器上没有记事本，只有vim文本编辑器；且服务器往往不配备鼠标，所以纯键盘友好的vim编辑器是最佳选择。简单来说，不会基础的vim操作，在Linux服务器上寸步难行。</p>
<h5 id="3-命令帮助"><a href="#3-命令帮助" class="headerlink" title="3.命令帮助"></a>3.命令帮助</h5><p><code>:help commandName</code></p>
<hr>
<h3 id="vim的4个模式及基本命令"><a href="#vim的4个模式及基本命令" class="headerlink" title="vim的4个模式及基本命令"></a>vim的4个模式及基本命令</h3><h5 id="1-normal模式"><a href="#1-normal模式" class="headerlink" title="1.normal模式"></a>1.normal模式</h5><p>normal模式是vim的默认模式，也就是通过vim filename命令打开文件时最初始的模式，只可以浏览，不可用编辑。如图：<br><img src="https://tva1.sinaimg.cn/large/007rAy9hgy1g3h0s4g2lwj30b00net8r.jpg" alt><br>在编辑模式/命令模式下，想要退回到normal模式，只需要按<code>esc</code>或<code>ctrl+[</code> 即可。<br>常用命令有:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 移动</span><br><span class="line">w           #word，移动到下一个单词开头</span><br><span class="line">b           #backward，移动到上一个单词开头</span><br><span class="line">0           #移动到行首</span><br><span class="line">$           #移动到行尾</span><br><span class="line">gg          #移动到文件开头</span><br><span class="line">G           # 【移动到文件结尾】！！！</span><br><span class="line">ctrl + u    #向上翻页</span><br><span class="line">ctrl + f    #向下翻页</span><br><span class="line">zz          #将当前行置到屏幕中间</span><br><span class="line"></span><br><span class="line"># 删除</span><br><span class="line">x           #删除某个字符</span><br><span class="line">dd          #删除行</span><br><span class="line"></span><br><span class="line"># 修改</span><br><span class="line">r           #replace，r后接字符，可以快速将光标处字符替换为r后的字符</span><br><span class="line">s           #substitute，删除光标处字符，并进入插入模式</span><br><span class="line">C           #删除整行，并进入插入模式</span><br><span class="line"></span><br><span class="line"># 查找</span><br><span class="line">&#x2F;           #查找&#x2F;后的字符，按n可以向后匹配</span><br><span class="line"></span><br><span class="line">u           #undo，回退</span><br></pre></td></tr></table></figure>
<h5 id="2-编辑模式"><a href="#2-编辑模式" class="headerlink" title="2.编辑模式"></a>2.编辑模式</h5><p>在normal模式下通过如下命令进入编辑模式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gi  #快速回到上次编辑位置</span><br><span class="line">i   #insert，在光标后插入</span><br><span class="line">a   #append，在光标前插入</span><br><span class="line">o   #open a line below，在光标下一行插入</span><br><span class="line">I   #在当前行末尾插入</span><br><span class="line">A   #在当前行开头插入</span><br><span class="line">O   #OPEN A LINE ABOVE，在光标上一行插入</span><br></pre></td></tr></table></figure>
<p>编辑模式下的常用vim命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 删除</span><br><span class="line">ctrl + h    #删除上一个字符</span><br><span class="line">ctrl + w    #删除上一个单词</span><br><span class="line">ctrl + h    #删除上一行</span><br></pre></td></tr></table></figure>
<h5 id="3-命令模式"><a href="#3-命令模式" class="headerlink" title="3.命令模式"></a>3.命令模式</h5><p>在normal模式/编辑模式下通过命令:进入，键入命令即可：<br><code>wq</code>：write quit，保存退出<br><code>set nu</code> ：set number，设置行号<br><img src="https://tva1.sinaimg.cn/large/007rAy9hgy1g3h168bxb8j30ar0mnt8o.jpg" alt><br><code>sp</code>：split，水平分屏。如需退出，使用:q即可。如需切换屏幕，使用<code>ctrl + ww</code>即可。<br><img src="https://tva1.sinaimg.cn/large/007rAy9hgy1g3h19gcp6gj30e10mj0sp.jpg" alt><br><code>%s/str1/str2/g</code>：全局替换，将字符串str1替换为str2<br><code>syntax on</code>：开启语法高亮</p>
<h5 id="4-可视化模式"><a href="#4-可视化模式" class="headerlink" title="4.可视化模式"></a>4.可视化模式</h5><p>为了方便<strong>选取文本</strong>，vim引入类可视化（visual）模式，该模式下可以进行<strong>全局操作</strong>和<strong>块状选择</strong>。在normal模式下通过执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v         #行内选择字符</span><br><span class="line">V         #选中一行</span><br><span class="line">ctrl + v  #Visual Block，块状选择</span><br><span class="line">d         #delete，删除</span><br><span class="line">y         #yank，复制</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="vim配置文件-vimrc"><a href="#vim配置文件-vimrc" class="headerlink" title="vim配置文件~/.vimrc"></a>vim配置文件<code>~/.vimrc</code></h3><p>vim配置文件是用户目录（~）下的隐藏文件（.），通过命令<code>vim ~/.vimrc</code>即可打开，可以对vim进行一系列<strong>持久化</strong>的配置。如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;vim注释采用单个引号</span><br><span class="line">set backspace&#x3D;2         &quot;可随时用退格键删除</span><br><span class="line">set nu 					&quot;设置行号，nu(mber)</span><br><span class="line">set cursorline  		&quot;光标所在行高亮</span><br><span class="line">set ruler				&quot;在状态栏显示光标的当前位置</span><br><span class="line">set showmode 			&quot;在底部显示，当前处于命令模式&#x2F;插入模式</span><br><span class="line">set showcmd				&quot;命令模式下，在底部显示当前键入的命令</span><br><span class="line">set showmatch			&quot;光标遇到圆括号、方括号、大括号时，自动高亮显示匹配的另一个括号</span><br><span class="line">set incsearch			&quot;输入模式搜索时，每输入一个字符，就自动跳到第一个匹配的结果</span><br><span class="line">set hlsearch 			&quot;高亮（high light）搜索</span><br><span class="line">set foldmethod&#x3D;indent 	&quot;设置折叠方式</span><br><span class="line">set wrap 				&quot;自动拆行，太长的行分为几行显示</span><br><span class="line">set visualbell  		&quot;出错时发出视觉提示，一般是屏幕闪烁</span><br></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Vim</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA Mybatis逆向生成</title>
    <url>/2019/11/25/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h3 id="IDEA的逆向生成步骤要与Eclipse的逆向生成不一样，记录一下"><a href="#IDEA的逆向生成步骤要与Eclipse的逆向生成不一样，记录一下" class="headerlink" title="IDEA的逆向生成步骤要与Eclipse的逆向生成不一样，记录一下"></a>IDEA的逆向生成步骤要与Eclipse的逆向生成不一样，记录一下</h3><p><img src="http://5b0988e595225.cdn.sohucs.com/q_70,c_zoom,w_640/images/20190417/fe4664b0269949169461087d6553b7cc.jpeg" alt></p>
<a id="more"></a>
<h2 id="（一）pom文件引入依赖"><a href="#（一）pom文件引入依赖" class="headerlink" title="（一）pom文件引入依赖"></a>（一）pom文件引入依赖</h2><p>基本依赖：mysql、jdbc、mybatis、druid、web<br>注：要小心版本冲突！！<br><img src="https://i.loli.net/2020/02/23/hwQl7bZ89sduO23.png" alt><br><img src="https://i.loli.net/2020/02/23/LCKditrzpYqm1GE.png" alt></p>
<hr>
<h2 id="（二）application-yml"><a href="#（二）application-yml" class="headerlink" title="（二）application.yml"></a>（二）application.yml</h2><p>application中增加数据库和连接池的链接信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8089</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3307&#x2F;school</span><br><span class="line">    username: root</span><br><span class="line">    password: 数据库密码</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">    druid:</span><br><span class="line">      initial-size: 50</span><br><span class="line">      min-idle: 20</span><br><span class="line">      max-active: 100</span><br><span class="line">      max-wait: 60000</span><br><span class="line">      time-between-eviction-runs-millis: 60000</span><br><span class="line">      min-evictable-idle-time-millis: 300000</span><br><span class="line">      validation-query: SELECT 1</span><br><span class="line">      test-while-idle: true</span><br><span class="line">      test-on-borrow: false</span><br><span class="line">      test-on-return: false</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="（三）resources文件夹中增加xml文件"><a href="#（三）resources文件夹中增加xml文件" class="headerlink" title="（三）resources文件夹中增加xml文件"></a>（三）resources文件夹中增加xml文件</h2><p><img src="https://i.loli.net/2020/02/23/LCKditrzpYqm1GE.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE generatorConfiguration</span><br><span class="line">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD MyBatis Generator Configuration 1.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line">    &lt;!-- 配置mysql 驱动jar包路径.用了绝对路径 --&gt;</span><br><span class="line">    &lt;classPathEntry</span><br><span class="line">            location&#x3D;&quot;E:&#x2F;&#x2F;mvn_repository&#x2F;reps&#x2F;mysql&#x2F;mysql-connector-java&#x2F;5.1.47&#x2F;mysql-connector-java-5.1.47.jar&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context id&#x3D;&quot;scm_mysql_tables&quot; targetRuntime&#x3D;&quot;MyBatis3&quot;&gt;</span><br><span class="line">        &lt;!-- 防止生成的代码中有很多注释，加入下面的配置控制 --&gt;</span><br><span class="line">        &lt;commentGenerator&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;suppressAllComments&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;suppressDate&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;commentGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 数据库连接 --&gt;</span><br><span class="line">        &lt;jdbcConnection driverClass&#x3D;&quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">                        connectionURL&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3307&#x2F;school?characterEncoding&#x3D;UTF-8&quot;</span><br><span class="line">                        userId&#x3D;&quot;root&quot;</span><br><span class="line">                        password&#x3D;&quot;密码&quot;&gt;</span><br><span class="line">        &lt;&#x2F;jdbcConnection&gt;</span><br><span class="line"></span><br><span class="line">        &lt;javaTypeResolver&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;forceBigDecimals&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;javaTypeResolver&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 配置 pojo 实体类文件所在项目及包路径 --&gt;</span><br><span class="line">        &lt;javaModelGenerator targetPackage&#x3D;&quot;com.xdclass.demo.pojo&quot;</span><br><span class="line">                            targetProject&#x3D;&quot;src&#x2F;main&#x2F;java&quot;&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;enableSubPackages&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;trimStrings&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;javaModelGenerator&gt;</span><br><span class="line">        &lt;!-- 配置Mapper接口所在的项目及包路径 --&gt;</span><br><span class="line">        &lt;sqlMapGenerator targetPackage&#x3D;&quot;com.xdclass.demo.mapper&quot;</span><br><span class="line">                         targetProject&#x3D;&quot;src&#x2F;main&#x2F;java&quot;&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;enableSubPackages&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;sqlMapGenerator&gt;</span><br><span class="line">        &lt;!-- 配置常规功能单元（工具类）所在的项目及包路径，包括xml文件等插件 --&gt;</span><br><span class="line">        &lt;javaClientGenerator type&#x3D;&quot;XMLMAPPER&quot;</span><br><span class="line">                             targetPackage&#x3D;&quot;com.xdclass.demo.mapper&quot;</span><br><span class="line">                             targetProject&#x3D;&quot;src&#x2F;main&#x2F;java&quot;&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;enableSubPackages&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;javaClientGenerator&gt;</span><br><span class="line">        &lt;!-- 数据表进行生成操作 schema:相当于库名; tableName:表名;</span><br><span class="line">            domainObjectName:对应的DO</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;table tableName&#x3D;&quot;%&quot;&gt;</span><br><span class="line">        &lt;&#x2F;table&gt;</span><br><span class="line">    &lt;&#x2F;context&gt;</span><br><span class="line">&lt;&#x2F;generatorConfiguration&gt;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="（四）pom文件增加build依赖"><a href="#（四）pom文件增加build依赖" class="headerlink" title="（四）pom文件增加build依赖"></a>（四）pom文件增加build依赖</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.generator&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.3.5&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;verbose&gt;true&lt;&#x2F;verbose&gt;</span><br><span class="line">                &lt;overwrite&gt;true&lt;&#x2F;overwrite&gt;</span><br><span class="line">            &lt;&#x2F;configuration&gt;</span><br><span class="line">        &lt;&#x2F;plugin&gt;</span><br><span class="line">    &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;resources&gt;</span><br><span class="line">        &lt;resource&gt;</span><br><span class="line">            &lt;directory&gt;src&#x2F;main&#x2F;java&lt;&#x2F;directory&gt;</span><br><span class="line">            &lt;includes&gt;</span><br><span class="line">                &lt;include&gt;**&#x2F;*.xml&lt;&#x2F;include&gt;</span><br><span class="line">            &lt;&#x2F;includes&gt;</span><br><span class="line">        &lt;&#x2F;resource&gt;</span><br><span class="line">    &lt;&#x2F;resources&gt;</span><br><span class="line">&lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="（五）使用maven自动生成"><a href="#（五）使用maven自动生成" class="headerlink" title="（五）使用maven自动生成"></a>（五）使用maven自动生成</h2><p><img src="https://i.loli.net/2020/02/23/G5yNkOUqwEJXigZ.png" alt><br>控制台出现<br><img src="https://i.loli.net/2020/02/23/aI1dGmy98UAi3qC.png" alt><br>即生成成功<br>注：生成的实体类是没加序列化，不要忘记implements Serializable。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub小技巧</title>
    <url>/2019/11/22/GitHub%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p><img src="http://gss0.baidu.com/94o3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/bba1cd11728b471049731910c5cec3fdfd03238a.jpg" alt></p>
<a id="more"></a>
<h3 id="GitHub小技巧"><a href="#GitHub小技巧" class="headerlink" title="GitHub小技巧"></a>GitHub小技巧</h3><hr>
<h2 id="（一）快捷键查看：shift"><a href="#（一）快捷键查看：shift" class="headerlink" title="（一）快捷键查看：shift + ?"></a>（一）快捷键查看：shift + ?</h2><p>在任意界面输入shift + ?，可以显示快捷键。</p>
<hr>
<h2 id="（二）查看自己项目的访问数据：Insights-Traffic"><a href="#（二）查看自己项目的访问数据：Insights-Traffic" class="headerlink" title="（二）查看自己项目的访问数据：Insights - Traffic"></a>（二）查看自己项目的访问数据：Insights - Traffic</h2><p>在自己的项目下，点击Insights-Traffic，里面有Referring sites（代表大家从什么网页来到你的项目）和Popular content（代表大家经常看你项目的什么文件）。<br><img src="https://dragonbaby308.oss-cn-hangzhou.aliyuncs.com/git/github/shortcut.png" alt></p>
<hr>
<h2 id="（三）编辑代码"><a href="#（三）编辑代码" class="headerlink" title="（三）编辑代码"></a>（三）编辑代码</h2><p>在查看任意文件时，右上角会有一个小铅笔的标识。<br><img src="https://dragonbaby308.oss-cn-hangzhou.aliyuncs.com/git/github/pen.png" alt><br>点击小铅笔就可以直接编辑文件，编辑完成后，直接在页面上点击Propose File Change，Github就会为你fork这个仓库，创建一个pull request，节省了在本地fork -&gt; pull -&gt; 修改 -&gt; push -&gt; 创建PR的过程。</p>
<hr>
<h2 id="（四）趋势图——https-octoverse-github-com"><a href="#（四）趋势图——https-octoverse-github-com" class="headerlink" title="（四）趋势图——https://octoverse.github.com/"></a>（四）趋势图——<a href="https://octoverse.github.com/" target="_blank" rel="noopener">https://octoverse.github.com/</a></h2><p>Github语言趋势图：<a href="https://octoverse.github.com/" target="_blank" rel="noopener">https://octoverse.github.com/</a></p>
<hr>
<h2 id="（五）精确搜索项目"><a href="#（五）精确搜索项目" class="headerlink" title="（五）精确搜索项目"></a>（五）精确搜索项目</h2><p>in:name keyWord：项目名中含有keyWord<br>in:readme keyWord：项目README.md中含有keyWord<br>in:description keyWord：项目描述中含有keyWord<br>stars:&gt;N：星星数量大于N<br>language:Golang：语言限定为Golang语言<br>pushed:&gt;2019-06-06：最后一次提交时间晚于2019-06-06<br>比如我想搜索Golang语言微服务项目，最后一次提交时间要晚于2019-06-06，星星数量大于1000个：<br>in:description 微服务 language:go pushed:&gt;2019-06-06 stars:&gt;1000</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>其他</tag>
      </tags>
  </entry>
</search>
